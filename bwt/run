#!/bin/bash
set -eo pipefail
source /ez/util.sh

bool_opt "$BWT" || abort_service
wait_for_bitcoind || exit 0

bcinfo=$(bitcoin-cli getblockchaininfo)

# General config
export ELECTRUM_ADDR=$BIND_ADDR:50001
export HTTP_ADDR=$BIND_ADDR:3060
export NO_REQUIRE_ADDRESSES=1
export NOTIFY_FD=5
export RUST_LOG_STYLE=always
[ $NETWORK == "regtest" ] && export INITIAL_IMPORT_SIZE=20

# Load config options (in addition to these in /data/config, but reloaded on restart)
[ -f /data/bwt/config ] && export $(grep -v '^#' /data/bwt/config | xargs)

# Don't wait for bitcoind to finish syncing before importing addresses, to give
# users with pruning enabled a chance to do one full scan during the IBD.
export NO_WAIT_SYNC=${NO_WAIT_SYNC:-1}

# Incresase the default gap limit to reduce the chances of transactions getting missed during
# the IBD when too many addresses get processed in the same block, before the indexer can catch up.
export GAP_LIMIT=${GAP_LIMIT:-300}

# Enable real-time updates using unix socket notifications when bitcoind is running locally
# Also see init.sh and https://github.com/bwt-dev/bwt#real-time-indexing
if [ "$BITCOIND_MODE" == "local" ]; then
  mkdir -p /run/bwt && chown bwt /run/bwt
  export UNIX_LISTENER_PATH=/run/bwt/notify-socket UNIX_LISTENER_MODE=511 # 777 in octal
  export POLL_INTERVAL=${POLL_INTERVAL:-90} # seconds
fi

# Disable historical rescan by default when pruning is enabled
if [ "$(jq -er .pruned <<< $bcinfo)" == true ]; then
  export RESCAN_SINCE=${RESCAN_SINCE:-now}
fi

# Create an 'ez-bwt' wallet by default
if [ -z "$BITCOIND_WALLET" ]; then
  export BITCOIND_WALLET=ez-bwt
  export CREATE_WALLET_IF_MISSING=1
fi

# Configure standalone addresses to track
if [ -f /data/track-addresses.txt ]; then
  export ADDRESSES_FILE=/home/bwt/addresses.txt
  cp /data/track-addresses.txt $ADDRESSES_FILE && chown bwt $ADDRESSES_FILE
fi

# Suppress bwt's default startup banner and display it on our own,
# with a slight delay and some modifications
if ! bool_opt "$NO_STARTUP_BANNER"; then
  export NO_STARTUP_BANNER=1
  (do_once bwt-banner && wait_for_service bwt 0 && sleep 1 && banner -s &) 1>&2
fi

# Restart bwt whenever bitcoind gets restarted, so it'll pick up the new cookie
([ "$BITCOIND_MODE" == "local" ] && do_once bwt-restart-with \
  && restart_with bwt bitcoind &) 1>&2

# Start
info bwt Starting Bitcoin Wallet Tracker...
exec s6-setuidgid bwt bwt $BWT_OPTS 2>&1
